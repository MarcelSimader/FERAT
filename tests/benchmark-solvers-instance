#! /usr/bin/bash
# Author: Marcel Simader (marcel.simader@jku.at)
# Date: 05.03.2024
# (c) Marcel Simader 2024, Johannes Kepler UniversitÃ¤t Linz

set -o pipefail

# INPUTS:
#   - 'DB', path to database file
#   - 'SOLVER', path to solver binary
#   - 'PROOF_TYPE', proof type of the solver
#   - 'ARGS', the arguments to the solver
#   - 'EXP_FILE', the expansion CNF file
#   - 'TEST_DIR', the path to this script's folder
#   - 'SPACE_LIMIT', the space limit in MB
#   - 'TIME_LIMIT', the time limit in s

DB="${1}"
SOLVER="${2}"
PROOF_TYPE="${3}"
ARGS="${4}"
EXP_FILE="${5}"
TEST_DIR="${6}"
SPACE_LIMIT="${7}"
TIME_LIMIT="${8}"

source "${TEST_DIR}/.shared"

mkdir -p "$HOME/tmp"
TMP="`mktemp -p "$HOME/tmp" benchmark-XXXX.tmp`"
TIME_TMP="`mktemp -p "$HOME/tmp" benchmark-time-XXXX.tmp`"
chmod 0664 "${TMP}" "${TIME_TMP}"

int_cleanup() {
    # Beter to use mv instead of rm, for catastrophic cases
    mv -f "${TMP}" "${TIME_TMP}" "/tmp"
    exit "$1"
}
trap "int_cleanup 130" SIGINT

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~ Set Up ~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

assert_cmd sqlite3
assert_cmd runlim --version '2.0.[0-9]+(rc[0-9]+)?'

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~ Run Solver ~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Run solver on the file
subsection "Running '${SOLVER} ${ARGS}'..."
(
    trap 'kill 0; int_cleanup 130' SIGINT;
    trap 'kill 0; int_cleanup 137' SIGKILL;
    runlim --kill --propagate \
        --space-limit="${SPACE_LIMIT}" --time-limit="${TIME_LIMIT}" \
        --output-file="${TIME_TMP}" \
        ${SOLVER} ${ARGS} \
        2>&1
) | tee "${TMP}"; code="$?"
echo "( '${SOLVER}' exited with code ${code} )"

# ~~~~~~~~~~~~~~~~~~~~ Handle Errors ~~~~~~~~~~~~~~~~~~~~

if [[ "${code}" -ne 10 && "${code}" -ne 20 ]]; then
    case "${code}" in
        0)
            REASON="CLI(${code})" ;;
        1|2|3|4|5|6|7|11)
            REASON="RUNLIM(${code}): `grep -Po -m1 '(?<=status:[ \t]).*$' "${TIME_TMP}"`" ;;
        137)
            REASON="SIGKILL(${code}): `grep -Eo -m1 'OOM|TIME' "${TMP}"`" ;;
        *)
            REASON="MISC(${code})" ;;
    esac
    sqlite3 <<- EOF
.open '${DB}'
.timeout 30000
INSERT INTO errors
    VALUES ('${SOLVER}', '${EXP_FILE}', '${REASON}');
EOF
    echo "Error '${REASON}'"
    echo "Continuing..."
    echo
    int_cleanup 0
fi

# ~~~~~~~~~~~~~~~~~~~~ Handle Timing ~~~~~~~~~~~~~~~~~~~~

TOTAL_TIME="`grep -Po '(?<=time:			)\d+.\d*(?= seconds)' "${TIME_TMP}" || echo 0`"
if [[ "${code}" -eq 10 ]]; then SAT="1"; else SAT="0"; fi
sqlite3 <<- EOF
.open '${DB}'
.timeout 30000
INSERT INTO benchmark
    VALUES ('${SOLVER}', '${PROOF_TYPE}', '${EXP_FILE}', ${SAT}, ${TOTAL_TIME});
EOF
echo

int_cleanup 0
