#! /usr/bin/bash
# Author: Marcel Simader (marcel.simader@jku.at)
# Date: 24.01.2024
# (c) Marcel Simader 2024, Johannes Kepler Universit√§t Linz

set -o pipefail

if [[ ( "${1}" =~ -h|--help ) || ( "${#}" -lt 2 ) ]]; then
    echo "Usage: ${0} [-h,--help] EXP_DIR QBF_DIR FERP_DIR [SQL_DB] [EXP_FILE_PAT]"
    echo
    echo "Runs FERP on all the pairs of QBF files and CNF expansions. Based on QBF_DIR,"
    echo " the appropriate QBF files will be selected based on the expansion files."
    echo
    echo "EXAMPLE USAGE: "
    echo "    ${0} db.sql 'B6_C*.qdimacs'"
    echo
    echo "ARGUMENT DEFAULTS:"
    echo "  [SQL_DB] automatically generated name of form 'ferp-benchmark-XXXX.sql'"
    echo "  [EXP_FILE_PAT] defaults to all files in EXP_DIR if left empty"
    exit 0
fi

date; hostname

TEST_DIR="`dirname "${0}"`"
source "${TEST_DIR}/.shared"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~ Run Config ~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SPACE_LIMIT="8192" # [MB]
echo "Using a space limit of $SPACE_LIMIT MiB"
HOURS="0" # [h]
MINS="15" # [m]
SECS="0" # [s]
TIME_LIMIT="`time2secs ${HOURS} ${MINS} ${SECS}`"
echo "Using a time limit of $HOURS:$MINS:$SECS ($TIME_LIMIT s)"

BASE_DIR="${HOME}/ferp-benchmark"
LOG_DIR="${BASE_DIR}/logs"
mkdir -p "${BASE_DIR}" "${LOG_DIR}"
LOG_PATH="${LOG_DIR}/ferp-benchmark_00_%j.log"

PARAL="`parallel "ferp-benchmark" "c1" "${SPACE_LIMIT}" "${TIME_LIMIT}" "${LOG_PATH}"`"

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~ Set Up ~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

VENV_DIR="${TEST_DIR}/../.venv"

assert_cmd sqlite3
assert_cmd runlim --version '2.0.[0-9]+(rc[0-9]+)?'

EXP_DIR="`realpath ${1}`"
QBF_DIR="`realpath ${2}`"
FERP_DIR="`realpath ${3}`"
EXP_PAT="*"
if [[ -n "${4}" ]]; then
    DB="`realpath "${4}"`"
    if [[ -n "${5}" ]]; then EXP_PAT="${5}"; fi
else
    # Create database schema with unique file name, if not given already
    DB="`mktemp -p . ferp-benchmark-XXXX.sql`"
fi
# Look up expansion files based on given pattern
echo "Using expansion file pattern '${EXP_PAT}'"
EXP_FILES="`find "${EXP_DIR}" -name "${EXP_PAT}" -type f`"

if [[ ! -f "${DB}" ]]; then touch "${DB}"; fi
TMP="`mktemp -p . ferp-tmp-XXXX.tmp`"

chmod 0664 "${TMP}" "${DB}"

int_cleanup() {
    # Beter to use mv instead of rm, for catastrophic cases
    mv -f "${TMP}" "/tmp/`whoami`"
    exit "$1"
}
trap "int_cleanup 130" SIGINT

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~ SQL Set Up ~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

echo "Writing to SQL-DB '${DB}'"
# Run a SQLITE command for our generated database file
sqlite3 <<- EOF
.open '${DB}'

CREATE TABLE IF NOT EXISTS benchmark(
    fname TEXT NOT NULL,
    total_s INT NOT NULL
);

CREATE TABLE IF NOT EXISTS errors(
    fname TEXT,
    reason TEXT NOT NULL
);
EOF

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~ Main Loop ~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(
    trap 'kill 0; int_cleanup 130' SIGINT;

    msg_start

    FIRST=1
    for exp_file in ${EXP_FILES}; do
        if [[ "${FIRST}" -ne 1 ]]; then echo; echo; fi
        FIRST=0
        section "Running for expansion file '${exp_file}'"
        echo

        # Find CNF expansion file based on given QBF file
        base="`basename ${exp_file}`"
        base="${base%.qdimacs.gz.unsat.cnf}"
        base="${base%.qdimacs.gz.sat.cnf}"
        qbf_file="${QBF_DIR}/${base}.qdimacs.gz"
        if [[ ! -f "${qbf_file}" ]]; then
            echo "Unable to find QBF file for '${exp_file}' at '${qbf_file}'"
            int_cleanup 2
        fi
        echo "Found QBF file '${qbf_file}'"

        ferp_file="${FERP_DIR}/${base}.ferp"
        echo "Writing to FERP file '${ferp_file}'"

        ${PARAL} \
            ${TEST_DIR}/benchmark-ferp-instance \
            "${DB}" "${exp_file}" "${qbf_file}" "${ferp_file}" "${TEST_DIR}" \
            "${SPACE_LIMIT}" "${TIME_LIMIT}" &
    done
    wait
)

int_cleanup 0
